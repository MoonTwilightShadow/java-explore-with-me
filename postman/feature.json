{
	"info": {
		"_postman_id": "aaa9ac65-1097-47de-8b3f-6cb707d1e5b8",
		"name": "\"Explore with me\" API Ratings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33695467"
	},
	"item": [
		{
			"name": "Поставить лайк ивенту",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, paid, initiator, confirmedRequests, views, rating\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество лайков должно быть равно 1\", function() {\r",
							"    pm.expect(target.rating.likes).equal(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set('e1id', event.id);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set('u1id', user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/like/events/:eventId/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"like",
						"events",
						":eventId",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}"
						},
						{
							"key": "userId",
							"value": "{{u1id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторный лайк",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"e1id\", event.id);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"    \r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addLike(event.id, user2.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"u1id\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, paid, initiator, confirmedRequests, views, rating\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество лайков должно быть равно нулю\", function() {\r",
							"    pm.expect(target.rating.likes).equal(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/like/events/:eventId/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"like",
						"events",
						":eventId",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}"
						},
						{
							"key": "userId",
							"value": "{{u1id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поставить дизлайк ивенту",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"e1id\", event.id);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"u1id\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, paid, initiator, confirmedRequests, views, rating\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество дизлайков должно быть равно 1\", function() {\r",
							"    pm.expect(target.rating.dislikes).equal(1);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dislike/events/:eventId/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dislike",
						"events",
						":eventId",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}"
						},
						{
							"key": "userId",
							"value": "{{u1id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторный дизлайк",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"e1id\", event.id);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addDislike(event.id, user2.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"u1id\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, paid, initiator, confirmedRequests, views, rating\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество дизлайков должно быть равно нулю\", function() {\r",
							"    pm.expect(target.rating.dislikes).equal(0);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dislike/events/:eventId/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dislike",
						"events",
						":eventId",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}"
						},
						{
							"key": "userId",
							"value": "{{u1id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Лайк вместо дизлайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"e1id\", event.id);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addDislike(event.id, user2.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"u1id\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, paid, initiator, confirmedRequests, views, rating\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество лайков должно быть равно одному, дизлайков - нулю\", function() {\r",
							"    pm.expect(target.rating.likes).equal(1);\r",
							"    pm.expect(target.rating.dislikes).equal(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/like/events/:eventId/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"like",
						"events",
						":eventId",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}"
						},
						{
							"key": "userId",
							"value": "{{u1id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Дизлайк вместо лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"e1id\", event.id);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addLike(event.id, user2.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"u1id\", user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, paid, initiator, confirmedRequests, views, rating\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество лайков должно быть равно нулю, дизлайков - одному\", function() {\r",
							"    pm.expect(target.rating.likes).equal(0);\r",
							"    pm.expect(target.rating.dislikes).equal(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dislike/events/:eventId/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dislike",
						"events",
						":eventId",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}"
						},
						{
							"key": "userId",
							"value": "{{u1id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка сортировки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"e1id\", event.id);\r",
							"        \r",
							"        let user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addLike(event.id, user2.id);\r",
							"\r",
							"        let eventBody2 = rnd.getEvent(category.id);\r",
							"        let event2 = await api.addEvent(user.id, eventBody2);\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"        pm.collectionVariables.set(\"e2id\", event2.id);\r",
							"\r",
							"        user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addLike(event2.id, user2.id);\r",
							"        user2 = await api.addUser(rnd.getUser());\r",
							"        await api.addLike(event2.id, user2.id);\r",
							"\r",
							"        pm.request.removeQueryParams(['categories']);\r",
							"        pm.request.addQueryParams(['categories=' + category.id])\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Правильность сортировки\", function () {\r",
							"    console.log(pm.collectionVariables.get(\"e2id\"));\r",
							"    console.log(pm.collectionVariables.get(\"e1id\"));\r",
							"\r",
							"    pm.expect(target[0].id).equal(pm.collectionVariables.get(\"e2id\"));\r",
							"    pm.expect(target[1].id).equal(pm.collectionVariables.get(\"e1id\"));\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events?categories=0&sort=RATINGS",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "categories",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "RATINGS"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addLike(eventId, userId, verbose=null) {\r",
					"        return this.patch(\"/like/events/\" + eventId + \"/users/\" + userId, \"Ошибка при добавлении нового лайка: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addDislike(eventId, userId, verbose=null) {\r",
					"        return this.patch(\"/dislike/events/\" + eventId + \"/users/\" + userId, \"Ошибка при добавлении нового дизлайка: \", verbose)\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "e1id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "e2id",
			"value": "2",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "u1id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "u2id",
			"value": "2",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		}
	]
}